This is a crucial question when debugging a system involving AXI DMA, especially when dealing with data reception (like from your AXI Ethernet into DDR4).

Since the AXI DMA writes data directly to memory, bypassing the Microblaze's core execution flow, we need to employ specific techniques to verify the write operation. Here is a breakdown of how to determine if your AXI DMA is successfully writing to DDR4, ranging from software-based debugging to hardware-level analysis.

Method 1: Software Debugging and Memory Inspection (Vitis/XSDB)
The most straightforward way to check if data is being written is to inspect the memory location where the DMA is supposed to be writing.

Steps:
Identify the Target Buffer Address: In your main.c or network driver code, locate the buffer in DDR4 that the DMA is configured to write to (e.g., RxBuffer). Note its address.

Ensure Cache Invalidation (Crucial!): Since you're using DDR4 with a Microblaze cache, if the Microblaze previously accessed this memory location, it might be reading stale data from its cache. You must invalidate the cache before checking the memory contents. Even if the DMA write is successful, the debugger might show stale data from the cache.

Set a Breakpoint: Set a breakpoint in your code after an AXI DMA transfer is expected to have completed.

Inspect Memory in Vitis: When the breakpoint is hit:

Open the Memory window in Vitis.

Enter the address of your RxBuffer.

Analyze the data: If the DMA is working, you should see the raw data written by the DMA (e.g., the Ethernet packet headers and data) in this memory location. If the contents are all zeros or appear unchanged, the DMA is likely not writing to memory.

Example:
C

// ... DMA transfer initiated ...
// ... wait for completion (e.g., via interrupt status check) ...

// CRITICAL: Invalidate the cache before inspecting!
Xil_DCacheInvalidateRange((UINTPTR)RxBuffer, RX_BUFFER_SIZE); 

// Set breakpoint here
// Then, inspect RxBuffer address in Vitis Memory Window
Method 2: Monitoring AXI DMA Status Registers
The AXI DMA core provides status registers that the Microblaze can read to determine the state of a transfer.

Key Registers and Bits:
S2MM_DMASR (Stream to Memory Map - Receive Channel Status Register):

IOC_Irq (Bit 12): Interrupt on Completion. This bit is set when a transfer completes successfully.

Err_Irq (Bit 14): Error Interrupt. Set if a transfer fails (e.g., internal error, slave error during AXI write).

Halted (Bit 0): Set when the DMA channel is halted (requires restart).

Steps:
Read Status: Use the AXI DMA driver functions (e.g., XAxiDma_ReadReg) to read the S2MM_DMASR register after initiating a transfer.

Check for IOC_Irq: If the IOC_Irq bit is set, the DMA considers the transfer complete.

Example (Conceptual, driver functions handle this):
While you shouldn't typically poll these registers if using interrupts, this is what the driver does internally to confirm success:

C

u32 DmaStatus;
// Assuming AxiDma instance and base address are available

// Read the S2MM status register
DmaStatus = XAxiDma_ReadReg(AxiDma.BaseAddr, XAXIDMA_RX_OFFSET + XAXIDMA_SR_OFFSET);

// Check if the "Interrupt on Completion" bit is set
if (DmaStatus & XAXIDMA_SR_IOC_MASK) {
    // DMA transfer completed successfully.
    // The data *should* be in DDR4.
} else {
    // DMA transfer is still pending or failed (check Err_Irq).
}
Method 3: Verifying Interrupts and Callbacks
If your system is interrupt-driven (which it should be for DMA), a successful DMA write will trigger an interrupt.

Steps:
Register Handlers: Ensure your interrupt controller (XIntc_Connect) correctly links the AXI DMA RX interrupt (S2MM) to the AXI DMA driver's interrupt handler (XAxiDma_S2MM_InterruptHandler).

Monitor Callbacks: The XAxiDma driver (or the higher-level Ethernet driver, like xaxiemacif.c) will often register a callback function (like AxiDma_RxCallBack or AxiEthernet_RecvHandler) that is executed upon successful DMA completion.

Use Print Statements or Breakpoints: Place xil_printf or a breakpoint within the relevant callback function (the one that handles DMA RX completion).

Verification:
If the callback is triggered: The DMA has completed the transfer and notified the Microblaze.

If the callback is NOT triggered: The DMA is failing to complete the transfer or is failing to assert the interrupt signal to the AXI INTC.

Method 4: Hardware Monitoring using ILA (Integrated Logic Analyzer)
If software methods fail to confirm the DMA writes, you need to verify the hardware transactions on the AXI bus. This is the definitive way to see if data is actually being sent from the DMA to the DDR4 memory controller.

Steps:
Modify Vivado Block Design:

Instantiate an AXI Protocol Checker and/or an Integrated Logic Analyzer (ILA) core.

Connect the ILA to the AXI Write Channels coming out of the AXI DMA and going towards the DDR4 controller (usually through an AXI Interconnect).

Key Signals to Monitor:

AWVALID / AWREADY: Address write channel handshake (is the DMA requesting a write?).

WVALID / WREADY: Write data channel handshake (is the DMA sending data and is the Interconnect/DDR4 accepting it?).

BVALID / BREADY: Write response channel handshake (is the DDR4 acknowledging the write transaction?).

Analyze in Vivado Hardware Manager:

Trigger ILA: Set a trigger on AWVALID and WVALID going high.

Observe the Transaction:

If you see valid transactions (AWVALID, WVALID, and BVALID going high): The DMA is successfully writing to the AXI bus, and the DDR4 controller is acknowledging the write. The problem is likely related to the address mapping or cache coherency (Method 1).

If AWVALID goes high but AWREADY or BVALID never return: The DMA is trying to write, but the DDR4 controller or AXI Interconnect is not responding or is rejecting the transaction. This could indicate an address mapping issue (AXI Interconnect is routing the request incorrectly) or a DDR4 configuration problem.

If AWVALID never goes high: The AXI DMA IP itself is not initiating the write transfer. This points to a fundamental configuration problem in the AXI DMA IP or the AXI Stream input from the AXI Ethernet.

By systematically applying these methods, you can pinpoint whether the AXI DMA is successfully completing the write operation and diagnose the root cause of why your Microblaze isn't seeing the expected data.